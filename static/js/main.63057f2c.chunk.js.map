{"version":3,"sources":["components/Body.jsx","components/Form.jsx","components/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Body","state","useContext","SiteContext","name","Form","dispatch","type","value","onChange","e","payload","target","Header","initialState","reducer","action","React","createContext","SiteProvider","children","useReducer","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAGaA,EAAO,WAAO,IAClBC,EAASC,qBAAWC,GAApBF,MACP,OAAO,yDAAQA,EAAMG,KAAd,2CCFIC,EAAO,WAAO,IAAD,EACIH,qBAAWC,GAA/BF,EADgB,EAChBA,MAAOK,EADS,EACTA,SACf,OAAO,uBACLC,KAAK,OACLC,MAAOP,EAAMG,KACbK,SAAU,SAAAC,GAAC,OAAIJ,EAAS,CACtBC,KAAK,cACLI,QAAQD,EAAEE,OAAOJ,YCPVK,EAAS,WAAO,IACnBZ,EAAUC,qBAAWC,GAArBF,MACR,OAAO,6BAAKA,EAAMG,QCCdU,EAAe,CACnBV,KAAO,eAGT,SAASW,EAAQd,EAAOe,GACtB,OAAQA,EAAOT,MACb,IAAK,cACH,OAAO,2BACFN,GADL,IAEEG,KAAMY,EAAOL,UAEjB,QACE,OAAOV,GAIN,IAAME,EAAcc,IAAMC,gBAE3BC,EAAe,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACTC,qBAAWN,EAASD,GADX,mBAC5Bb,EAD4B,KACrBK,EADqB,KAEnC,OAAO,cAACH,EAAYmB,SAAb,CAAsBd,MAAO,CAACP,QAAOK,YAArC,SACJc,KAIU,SAASG,IACtB,OACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,OCpCN,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,EAAD,MAEFa,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.63057f2c.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { SiteContext } from '../App';\n\nexport const Body = () => {\n  const {state} = useContext(SiteContext);\n  return <p>これは「{state.name}」の内容です</p>\n}\n","import React, { useContext } from 'react'\nimport { SiteContext } from '../App';\n\nexport const Form = () => {\n  const { state, dispatch } = useContext(SiteContext);\n  return <input\n    type=\"text\"\n    value={state.name}\n    onChange={e => dispatch({\n      type:'CHANGE_NAME',\n      payload:e.target.value\n    })}\n  />\n}\n","import React, { useContext } from 'react'\nimport { SiteContext } from '../App';\n\nexport const Header = () => {\n  const { state } = useContext(SiteContext);\n  return <h1>{state.name}</h1>\n}\n","import React , {useReducer} from 'react';\nimport { Body } from './components/Body';\nimport { Form } from './components/Form';\nimport { Header } from './components/Header';\n\n\nconst initialState = {\n  name : 'Jinta\\' Site'\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CHANGE_NAME':\n      return {\n        ...state,\n        name: action.payload\n      };\n    default : \n      return state\n  }\n}\n\nexport const SiteContext = React.createContext();\n\nconst SiteProvider = ({children}) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return <SiteContext.Provider value={{state, dispatch}}>\n    {children}\n  </SiteContext.Provider>\n}\n\nexport default function App() {\n  return (\n    <SiteProvider>\n      <Header />\n      <Body />\n      <Form />\n    </SiteProvider>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}